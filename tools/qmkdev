#!/bin/bash
# Copyright 2014 Quobyte Inc.

LANG=en_US.utf-8
DEVICE_ID_FILE="QUOBYTE_DEV_SETUP"
test -z $SMARTCTL && SMARTCTL=/usr/sbin/smartctl

function print_usage {
  printf "Usage: %s [-f] [-t type] [-s serno] mount_point\n" $(basename $0)
  echo "Creates a new Quobyte device on the disk/file system mounted at <mount_point>."
  echo "-f overwrites any existing device information (dangerous!)."
  echo "-t DATA|METADATA|REGISTRY optional device type"
  echo "   this device should be used as."
  echo "-s serial_number serial number for a device."
  echo
  exit 2
}

force_flag=
type_flag=
serial_number=
while getopts fhs:t: name
do
    case $name in
    f)    force_flag=1;;
    t)    type_flag="$OPTARG";;
    s)    serial_number="$OPTARG";;
    ?)    print_usage;;
    esac
done
shift $(($OPTIND - 1))

type_flag=$(echo "$type_flag"|awk '{print toupper($0)}')
if [[ "$type_flag" != "" && "$type_flag" != "REGISTRY" && \
    "$type_flag" != "METADATA" && "$type_flag" != "DATA" &&\
    "$type_flag" != "D" && "$type_flag" != "M" && "$type_flag" != "R" ]]; then
  echo "Error: Invalid device type."
  exit 10
fi

if [ $# -eq 0 ]; then
  print_usage
fi

if [ -n "$EUID" -a $EUID -ne 0 ]; then
  echo "Error: This programm must be executed as root (requires access to smartctl to read device identity)."
  exit 4
fi

MOUNT_POINT=$(echo "$1"|sed 's/\/$//g')
echo "Device mount point: ${MOUNT_POINT}"

DEVICE_FILE=${MOUNT_POINT}/${DEVICE_ID_FILE}
if [ -e ${DEVICE_FILE} ]; then
  if [ -z "$force_flag" ]; then
    echo "Error: Selected mount point is already a Quobyte device."
    echo "       Use -f to overwrite the current device information."
    echo "Exiting."
    exit 3
  else
    echo "WARNING: Device information will be overwritten. All data on this device is lost."
    mv ${DEVICE_FILE} ${DEVICE_FILE}.bak
  fi
fi

DEVICE=`grep " ${MOUNT_POINT} " /proc/mounts | cut -d " " -f 1`
FSTYPE=`grep " ${MOUNT_POINT} " /proc/mounts | cut -d " " -f 3`

if [ -z "${DEVICE}" ]; then
  echo "Error: Invalid mount point. ' ${MOUNT_POINT} ' not found in /proc/mounts."
  exit 11
fi
if [ ! -b "${DEVICE}" ]; then
  echo "Error: Invalid mount point. ${DEVICE} is no block device."
  exit 12
fi
# NOTE(quobyte): Keep this list in sync with the one in the OSD.
SUPPORTED_FS_TYPES="ext4 xfs btrfs"
supported_fs_found=0
for expected_fs in $SUPPORTED_FS_TYPES
do
  if [[ $expected_fs == $FSTYPE ]]; then
    supported_fs_found=1
    break
  fi
done
if [ $supported_fs_found -eq 0 ]; then
  echo "Error: Device file system not supported (${FSTYPE}). Supported file system types are: ${SUPPORTED_FS_TYPES}"
  exit 13
fi

echo "Linux device: ${DEVICE}"

DEVICE_MODEL=`$SMARTCTL --info ${DEVICE} | \
  sed -n 's/Device Model:\s*\(.*\)$/\1/p'`
if [ -z "$DEVICE_MODEL" ]; then
  DEVICE_MODEL=`$SMARTCTL --info ${DEVICE} | \
    sed -n 's/Product:\s*\([-\._a-zA-Z0-9]*\).*/\1/p'`
fi
if [ -z "$DEVICE_MODEL" ]; then
  DEVICE_MODEL="unknown"
  echo "WARNING: Cannot determine device model."
fi

generate_random_serial=0
if [ -n "$serial_number" ]; then
  echo "Override Serial Number: ${serial_number}"
  DEVICE_SERIAL="${serial_number}"
else
  DEVICE_SERIAL=`$SMARTCTL --info ${DEVICE} | \
    sed -n 's/Serial.*:\s*\([-\._a-zA-Z0-9]*\).*/\1/p'`

  if [ $generate_random_serial -eq 0 ]; then
    if [[ "$DEVICE_MODEL" =~ ^QEMU.* ]]; then
      echo "Ignoring pseudo serial number from QEMU device. Generating uuid."
      generate_random_serial=1
    elif [[ "$DEVICE_MODEL" =~ ^VBOX.* ]]; then
      echo "Ignoring pseudo serial number from VBOX device. Generating uuid."
      generate_random_serial=1
    elif [ -z "${DEVICE_SERIAL}" ]; then
      echo "Cannot determine device serial number. Generating uuid."
      generate_random_serial=1
    fi
  fi
fi
if [ $generate_random_serial -eq 0 -a ${#DEVICE_SERIAL} -lt 5 ]; then
  echo "Device serial number too short. Generating uuid."
  generate_random_serial=1
fi
if [ $generate_random_serial -eq 1 ]; then
  DEVICE_SERIAL=`uuidgen 2> /dev/null`
  if [ -z "$DEVICE_SERIAL" ]; then
    echo "Cannot determine device serial number and uuidgen failed."
    echo "Please provide a serial number using the -s switch."
    exit 7
  fi
fi

CREATION_DATE=`date`
umask 0022
echo "# Quobyte device identifier file" > ${DEVICE_FILE}
echo "# Created ${CREATION_DATE}" >> ${DEVICE_FILE}
echo "# Hostname: ${HOSTNAME}" >> ${DEVICE_FILE}
echo "device.serial=${DEVICE_SERIAL}" >> ${DEVICE_FILE}
echo "device.model=${DEVICE_MODEL}" >> ${DEVICE_FILE}
if [ -n "$type_flag" ]; then
  if [[ "$type_flag" == "METADATA" || "$type_flag" == "M" ]]; then
    echo "device.type=METADATA_DEVICE" >> ${DEVICE_FILE}
  elif [[ "$type_flag" == "DATA" || "$type_flag" == "D" ]]; then
    echo "device.type=DATA_DEVICE" >> ${DEVICE_FILE}
  elif [[ "$type_flag" == "REGISTRY" || "$type_flag" == "R" ]]; then
    echo "device.type=DIR_DEVICE" >> ${DEVICE_FILE}
  fi
else
  echo "No type specified. To use the device, please assign one or more content"
  echo "types using the qmgmt tool."
fi
chown quobyte ${DEVICE_FILE}
chown quobyte ${MOUNT_POINT}
if [[ $? != 0 ]]; then
  echo "WARNING: Cannot change ownership of mount point, please make sure Quobyte services"
  echo "         can write to the mount point!"
fi

echo "Device successfully initialized."
echo
echo "If this device is mounted on a host with a running Quobyte service, "
echo "the device will be registered automatically."
