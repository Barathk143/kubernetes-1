apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: client
  namespace: quobyte
spec:
  selector:
    matchLabels:
      role: client
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/prometheus'
        prometheus.io/port: '55000'
      labels:
        role: client
        version: "2"
    spec:
      #serviceAccountName: quobyteclientsrv
      containers:
      - name: quobyte-client
        image: quay.io/quobyte/quobyte-client:2
        imagePullPolicy: Always
        # NOTE(kaisers): The weird if check before mkdir -p is required to not hang on a stale mount
        command:
          - /bin/sh
          - -xec
          - |
            if [[ ! -f /etcfs/fuse.conf ]]; then
              echo "Copy fuse config to host"
              { echo -e '# Copied from Quobyte Client Container\n'; cat /etc/fuse.conf; } > /etcfs/fuse.conf
            fi
            if [[ $(grep "^[^#]" /etcfs/fuse.conf | grep -c "user_allow_other") -eq 0 ]]; then
              echo "user_allow_other" >> /etcfs/fuse.conf
            fi
            if cut -d" " -f2 /etcfs/mtab | grep -q ${QUOBYTE_MOUNT_POINT}; then
              umount ${QUOBYTE_MOUNT_POINT}
            else
              if ! [[ $(ls `dirname ${QUOBYTE_MOUNT_POINT}`|egrep "^`basename ${QUOBYTE_MOUNT_POINT}`$") ]]; then
                echo "mount point ${QUOBYTE_MOUNT_POINT} does not exist, creating it..."
                mkdir -p ${QUOBYTE_MOUNT_POINT}
              fi
            fi

            # set the mount point immutable. As long as mount.quobyte does not run,
            # other processes cannot write data to this dir.
            chattr +i ${QUOBYTE_MOUNT_POINT}

            # convert QUOBYTE_REGISTRY to IPs
            # QUOBYTE_REGISTRY is a comma separated value of registry endpoints
            # e.g., s1.example.com:5681,s2.example.com:5681,s3.example.com:5681
            # or it can be a single value: s.example.com:5681
            registry_ips=

            IFS=','
            for endpoint in $QUOBYTE_REGISTRY; do
                name=$(echo $endpoint | awk '{split($0,a,":"); print a[1]}')
                port=$(echo $endpoint | awk '{split($0,a,":"); print a[2]}')
                ip=$(nslookup $name | grep $name -A2 | grep Address | cut -d':' -f2 | awk '{print $1}')
                registry_ips="$ip:$port $registry_ips"
            done
            unset IFS

            ADDR=$(echo $registry_ips | tr ' ' ',')
            echo "QUOBYTE_REGISTRY: ${ADDR}"

            /bin/nsenter -t 1 --wd=. -m -- \
              lib/ld-linux-x86-64.so.2 \
              --library-path ./lib \
            ./bin/mount.quobyte --hostname ${NODENAME} --allow-usermapping-in-volumename \
              --http-port 55000 -f -l /dev/stdout -d ${QUOBYTE_CLIENT_LOG_LEVEL} ${OPTS} \
              ${ADDR}/ ${QUOBYTE_MOUNT_POINT}
        securityContext:
          privileged: true
        env:
          - name: QUOBYTE_CLIENT_LOG_LEVEL
            value: INFO
          - name: QUOBYTE_REGISTRY
            value: registry.quobyte
          - name: QUOBYTE_MOUNT_POINT
            # Note(kaisers): the mount point has to be a subdir of the volume(Mount)
            value: /var/lib/kubelet/plugins/kubernetes.io~quobyte
          - name: NODENAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        ports:
          - name: http-port
            containerPort: 55000
            hostPort: 55000
            protocol: TCP
        readinessProbe:
          timeoutSeconds: 5
          httpGet:
            port: 55000
            path: /
        livenessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 5
          httpGet:
            port: 55000
            path: /
        volumeMounts:
          - name: k8s-plugin-dir
            mountPath: /var/lib/kubelet/plugins/kubernetes.io~quobyte
          - name: etcfs
            mountPath: /etcfs
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-xc", "/bin/nsenter -t 1 --wd=. -m -- lib/ld-linux-x86-64.so.2 --library-path ./lib ./bin/umount -f ${QUOBYTE_MOUNT_POINT}"]
      hostPID: true
      nodeSelector:
        quobyte_client: "true"
      volumes:
      - name: k8s-plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/kubernetes.io~quobyte
      - name: etcfs
        hostPath:
          path: /etc
